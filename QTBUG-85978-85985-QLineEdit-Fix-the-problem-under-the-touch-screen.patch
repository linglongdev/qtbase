Index: qtbase_temp/src/widgets/widgets/qlineedit.cpp
===================================================================
--- qtbase_temp.orig/src/widgets/widgets/qlineedit.cpp
+++ qtbase_temp/src/widgets/widgets/qlineedit.cpp
@@ -1537,6 +1537,12 @@ void QLineEdit::mousePressEvent(QMouseEv
 {
     Q_D(QLineEdit);
 
+    if (e->source() == Qt::MouseEventSynthesizedByQt) {
+        d->touchPress = true;
+        if (d->touchPopup)
+            d->touchPopup = false;
+        d->oldPosX = e->screenPos().x();
+    }
     d->mousePressPos = e->pos();
 
     if (d->sendMouseEventToInputContext(e))
@@ -1569,7 +1575,13 @@ void QLineEdit::mousePressEvent(QMouseEv
     } else
 #endif
     {
-        d->control->moveCursor(cursor, mark);
+        if (d->touchPress) {
+            d->CurrentCursor = cursor;
+            d->modStateMark = mark;
+            QTimer::singleShot(QApplication::doubleClickInterval(), this, SLOT(_q_waitTouchPopup()));
+        } else {
+            d->control->moveCursor(cursor, mark);
+        }
     }
 }
 
@@ -1612,6 +1624,26 @@ void QLineEdit::mouseMoveEvent(QMouseEve
             } else
 #endif
             {
+                if (d->oldPosX == 0) {
+                    d->oldPosX = e->screenPos().x();
+                    return;
+                }
+
+                if (d->doublePress)
+                    return;
+
+                // 1.0: Touch jitter causes the range of coordinates to change
+                if ((d->touchPress && !d->touchPopup) && (qAbs(e->screenPos().x() - d->oldPosX) < 1.0)) {
+                    d->oldPosX = e->screenPos().x();
+                    return;
+                }
+
+                d->oldPosX = e->screenPos().x();
+
+                //A long press under the touch screen will trigger Qt::MouseEventSource(MouseEventNotSynthesized)
+                if (d->touchPress && (e->screenPos().x() - (qreal)e->screenPos().toPoint().rx() == 0))
+                    return;
+
                 d->control->moveCursor(d->xToPos(e->pos().x()), select);
             }
         }
@@ -1625,6 +1657,15 @@ void QLineEdit::mouseMoveEvent(QMouseEve
 void QLineEdit::mouseReleaseEvent(QMouseEvent* e)
 {
     Q_D(QLineEdit);
+    if (e->source() == Qt::MouseEventSynthesizedByQt && d->touchPress) {
+        d->touchPress = false;
+        d->touchPopup = true;
+        if (d->doublePress) {
+            d->touchPopup = false;
+            d->doublePress = false;
+        }
+    }
+
     if (d->sendMouseEventToInputContext(e))
         return;
 #if QT_CONFIG(draganddrop)
@@ -1657,6 +1698,8 @@ void QLineEdit::mouseReleaseEvent(QMouse
 void QLineEdit::mouseDoubleClickEvent(QMouseEvent* e)
 {
     Q_D(QLineEdit);
+    if (e->source() == Qt::MouseEventSynthesizedByQt)
+        d->doublePress = true;
 
     if (e->button() == Qt::LeftButton) {
         int position = d->xToPos(e->pos().x());
@@ -2179,6 +2222,12 @@ void QLineEdit::dropEvent(QDropEvent* e)
 */
 void QLineEdit::contextMenuEvent(QContextMenuEvent *event)
 {
+    Q_D(QLineEdit);
+    d->touchPress = false;
+    d->touchPopup = false;
+    d->doublePress = false;
+
+
     if (QMenu *menu = createStandardContextMenu()) {
         menu->setAttribute(Qt::WA_DeleteOnClose);
         menu->popup(event->globalPos());
Index: qtbase_temp/src/widgets/widgets/qlineedit.h
===================================================================
--- qtbase_temp.orig/src/widgets/widgets/qlineedit.h
+++ qtbase_temp/src/widgets/widgets/qlineedit.h
@@ -255,6 +255,7 @@ private:
     Q_PRIVATE_SLOT(d_func(), void _q_handleWindowActivate())
     Q_PRIVATE_SLOT(d_func(), void _q_textEdited(const QString &))
     Q_PRIVATE_SLOT(d_func(), void _q_cursorPositionChanged(int, int))
+    Q_PRIVATE_SLOT(d_func(), void _q_waitTouchPopup())
 #if QT_CONFIG(completer)
     Q_PRIVATE_SLOT(d_func(), void _q_completionHighlighted(const QString &))
 #endif
Index: qtbase_temp/src/widgets/widgets/qlineedit_p.cpp
===================================================================
--- qtbase_temp.orig/src/widgets/widgets/qlineedit_p.cpp
+++ qtbase_temp/src/widgets/widgets/qlineedit_p.cpp
@@ -144,6 +144,15 @@ void QLineEditPrivate::_q_cursorPosition
     emit q->cursorPositionChanged(from, to);
 }
 
+void QLineEditPrivate::_q_waitTouchPopup()
+{
+    if (touchPopup) {
+        control->moveCursor(CurrentCursor, modStateMark);
+        touchPopup = false;
+    }
+}
+
+
 #ifdef QT_KEYPAD_NAVIGATION
 void QLineEditPrivate::_q_editFocusChange(bool e)
 {
@@ -241,6 +250,12 @@ void QLineEditPrivate::init(const QStrin
 
     q->setAttribute(Qt::WA_MacShowFocusRect);
 
+    touchPress = false;
+    touchPopup = false;
+    doublePress = false;
+    oldPosX = 0;
+    CurrentCursor = 0;
+    modStateMark = false;
     initMouseYThreshold();
 }
 
Index: qtbase_temp/src/widgets/widgets/qlineedit_p.h
===================================================================
--- qtbase_temp.orig/src/widgets/widgets/qlineedit_p.h
+++ qtbase_temp/src/widgets/widgets/qlineedit_p.h
@@ -206,6 +206,14 @@ public:
     uint clickCausedFocus : 1;
     uint edited : 1;
     int hscroll;
+
+    int CurrentCursor;
+    bool touchPress;
+    bool touchPopup;
+    bool doublePress;
+    bool modStateMark;
+    qreal oldPosX ;
+
     int vscroll;
     uint alignment;
     static const int verticalMargin;
@@ -218,6 +226,8 @@ public:
     void _q_handleWindowActivate();
     void _q_textEdited(const QString &);
     void _q_cursorPositionChanged(int, int);
+    void _q_waitTouchPopup();
+
 #ifdef QT_KEYPAD_NAVIGATION
     void _q_editFocusChange(bool);
 #endif
